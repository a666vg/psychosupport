"""
–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Telegram –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º
"""
from datetime import datetime
from telebot import types, TeleBot
from telebot.types import CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from config import TOKEN
import telebot_calendar
from google_sheet import GoogleSheets, get_cache_locations
from keyboards import create_markup_menu, button_to_menu
import clear_dict

bot = TeleBot(TOKEN)

CLIENT_PHONE = {467168798: '+79522600066', 288041146: '+79215528067'}  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

def get_client_id(client_id, client_username) -> str:
    """–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    id_client = f"id: {str(client_id)}\n@{str(client_username)}\n"
    if CLIENT_PHONE.get(client_id, None) is not None:
        if CLIENT_PHONE[client_id] != '':
            id_client += 'tel: ' + CLIENT_PHONE[client_id]
        else:
            id_client += 'tel: None'
    return id_client

def create_client(chat_id) -> GoogleSheets:
    """–°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç GoogleSheet –ø–æ chat_id"""
    if clear_dict.CLIENT_DICT.get(chat_id):
        return clear_dict.CLIENT_DICT[chat_id]
    client = GoogleSheets(chat_id)
    clear_dict.CLIENT_DICT[chat_id] = client
    clear_dict.TIMER_DICT[chat_id] = datetime.now()
    return client

@bot.message_handler(commands=['start'])
def check_phone_number(message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if CLIENT_PHONE.get(message.chat.id, None) is None:
        markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω üìû", request_contact=True)
        markup.add(button_phone)
        bot.send_message(message.chat.id, '–î–ª—è –∑–∞–ø–∏—Å–∏ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
                         reply_markup=markup)

        @bot.message_handler(content_types=['contact'])
        def contact(message_contact):
            if message_contact.contact is not None:
                CLIENT_PHONE[message_contact.chat.id] = message_contact.contact.phone_number
                bot.send_message(message_contact.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!',
                                 reply_markup=ReplyKeyboardRemove())
                menu(message_contact)
    else:
        menu(message)

@bot.message_handler(content_types=['text'])
def any_word_before_number(message_any):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    bot.send_message(message_any.chat.id,
                     text='–ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n'
                          '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–Ω–æ–ø–∫–∞–º–∏.')

def menu(message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    clear_dict.clear_unused_info(message.chat.id)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
                     reply_markup=create_markup_menu())

@bot.callback_query_handler(lambda call: call.data == 'CANCEL_RECORD')
def cancel_record(call):
    """–í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
    client = create_client(call.message.chat.id)
    client_id = get_client_id(call.message.chat.id, call.from_user.username)
    records = client.get_record(client_id)
    if len(records) != 0:
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(*[InlineKeyboardButton(text=' - '.join(x[:3]),
                                         callback_data=f'CANCEL {ind}')
                    for ind, x in enumerate(records)])
        markup.add(*button_to_menu(return_callback=None, menu_text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text='–ö–∞–∫—É—é –∑–∞–ø–∏—Å—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?üôà',
                              reply_markup=markup)
    else:
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text='–û—Ç–º–µ–Ω—è—Ç—å –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ ü§∑')
        check_phone_number(call.message)

@bot.callback_query_handler(lambda call: call.data.startswith('CANCEL'))
def approve_cancel(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏"""
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(*[InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data='APPROVE' + call.data),
                 InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='MENU')])
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text='–¢–æ—á–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å?',
                          reply_markup=markup)

@bot.callback_query_handler(lambda call: call.data.startswith('APPROVE'))
def set_cancel(call):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏"""
    client = clear_dict.CLIENT_DICT.get(call.from_user.id)
    if client:
        client_info = client.lst_records[int(call.data.split()[1])]
        client.date_record, client.time_record, client.location, client.psychologist = client_info
        client_id = get_client_id(call.message.chat.id, call.from_user.username)
        if client.set_time('', client_id):
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text='–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!')
        else:
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text='–ù–µ —Å–º–æ–≥ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.')
        check_phone_number(call.message)
    else:
        go_to_menu(call)

@bot.callback_query_handler(lambda call: call.data == 'MY_RECORD')
def show_record(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    client = create_client(call.message.chat.id)
    client_id = get_client_id(call.message.chat.id, call.from_user.username)
    records = client.get_record(client_id)
    rec = ''
    if len(records) != 0:
        rec += '–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏:\n\n'
        for i in sorted(records, key=lambda x: (x[0], x[1], x[2])):
            rec += 'ü™∑' + ' - '.join(i) + '\n'
    else:
        rec = '–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üîç'
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=rec)
    check_phone_number(call.message)

@bot.callback_query_handler(lambda call: call.data == 'RECORD')
def choice_location(call):
    """–í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏"""
    create_client(call.message.chat.id)
    all_loc = get_cache_locations()
    markup = InlineKeyboardMarkup(row_width=3)
    markup.add(*[InlineKeyboardButton(text=x, callback_data='LOCATION' + x)
                for x in all_loc.keys()])
    markup.add(*button_to_menu(None))
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text="–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:",
                          reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('LOCATION'))
def choice_psychologist(call):
    """–í—ã–±–æ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∞"""
    client = clear_dict.CLIENT_DICT.get(call.from_user.id)
    if client:
        client.location = call.data[len('LOCATION'):]
        dct = get_cache_locations()
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(*[InlineKeyboardButton(text=x, callback_data='PSYCHOLOGIST' + x)
                    for x in dct[client.location]])
        markup.add(InlineKeyboardButton(text='–õ—é–±–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥', callback_data='PSYCHOLOGIST' + '–õ–Æ–ë–û–ô'))
        markup.add(*button_to_menu('RECORD'))
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞:",
                              reply_markup=markup)
    else:
        go_to_menu(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith('PSYCHOLOGIST'))
def choice_date(call):
    """–í—ã–±–æ—Ä –¥–∞—Ç—ã"""
    client = clear_dict.CLIENT_DICT.get(call.from_user.id)
    if client:
        if call.data[len('PSYCHOLOGIST'):] != '–õ–Æ–ë–û–ô':
            client.psychologist = call.data[len('PSYCHOLOGIST'):]
        else:
            client.psychologist = None
        lst = client.get_all_days()
        lst = list(map(lambda x: datetime.strptime(x, '%d.%m.%Y').date(), lst))
        if len(lst) == 0:
            location = client.location if client.location else '–õ–Æ–ë–û–ô'
            markup = InlineKeyboardMarkup(row_width=2)
            markup.add(*button_to_menu('LOCATION' + location))
            bot.edit_message_text(chat_id=call.message.chat.id,
                                  message_id=call.message.message_id,
                                  text="–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç!\n"
                                       "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞üòâ",
                                  reply_markup=markup)
        else:
            client.lst_currant_date = lst
            clear_dict.CALENDAR_DICT[call.message.chat.id] = str(call.message.chat.id)
            bot.edit_message_text(chat_id=call.from_user.id,
                                  message_id=call.message.message_id,
                                  text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É:\n ‚úÖ - –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è',
                                  reply_markup=telebot_calendar.create_calendar(
                                      name='CALENDAR' + clear_dict.CALENDAR_DICT[call.message.chat.id],
                                      lst_current_date=lst))
    else:
        go_to_menu(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith('CALENDAR'))
def choice_time(call: CallbackQuery):
    """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
    client = clear_dict.CLIENT_DICT.get(call.from_user.id)
    if client:
        lst = client.lst_currant_date
        name, action, year, month, day = call.data.split(':')
        result = telebot_calendar.calendar_query_handler(
            bot=bot, call=call, name=name, action=action, year=year, month=month, day=day,
            lst_currant_date=lst)
        if action == "DAY":
            client.date_record = datetime(int(year), int(month), int(day)).strftime('%d.%m.%Y')
            lst_times = client.get_free_time()
            client.dct_currant_time = lst_times
            markup = InlineKeyboardMarkup(row_width=3)
            markup.add(*[InlineKeyboardButton(text=x, callback_data='TIME' + x)
                        for x in lst_times])
            psychologist = 'PSYCHOLOGIST' + (client.psychologist if client.psychologist else '–õ–Æ–ë–û–ô')
            markup.add(*button_to_menu(psychologist))
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:" if len(lst_times) != 0 else "–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!\n" \
                                                                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—Éüòâ"
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=markup)
        elif action == "MENU":
            go_to_menu(call)
        elif action == "RETURN":
            call.data = 'LOCATION' + client.location
            choice_psychologist(call)
    else:
        go_to_menu(call)

@bot.callback_query_handler(lambda call: call.data.startswith('TIME'))
def approve_record(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    client = clear_dict.CLIENT_DICT.get(call.from_user.id)
    if client:
        client.time_record = call.data[len('TIME'):]
        id_calendar = clear_dict.CALENDAR_DICT[call.from_user.id]
        date_string = client.date_record
        date_object = datetime.strptime(date_string, '%d.%m.%Y')
        formatted_date = date_object.strftime('%Y:') + str(date_object.month) + ':' + str(date_object.day)
        name_calendar = 'CALENDAR' + id_calendar + ':DAY:' + formatted_date
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data='APP_REC'))
        markup.add(*button_to_menu(name_calendar))
        bot.edit_message_text(chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              text=f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n'
                                   f'üìç –õ–æ–∫–∞—Ü–∏—è: {client.location}\n'
                                   f'üë§ –ü—Å–∏—Ö–æ–ª–æ–≥: {client.psychologist if client.psychologist else "–õ—é–±–æ–π"}\n'
                                   f'üìÖ –î–∞—Ç–∞: {client.date_record}\n'
                                   f'üïì –í—Ä–µ–º—è: {client.time_record}',
                              reply_markup=markup)
    else:
        go_to_menu(call)

@bot.callback_query_handler(func=lambda call: call.data.startswith('APP_REC'))
def set_time(call):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏"""
    client = clear_dict.CLIENT_DICT.get(call.from_user.id)
    if client:
        id_client = get_client_id(call.message.chat.id, call.from_user.username)
        if client.set_time(id_client):
            bot.edit_message_text(chat_id=call.from_user.id,
                                  message_id=call.message.message_id,
                                  text=f'–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª –≤–∞—Å!\n\n'
                                       f'üìç –õ–æ–∫–∞—Ü–∏—è: {client.location}\n'
                                       f'üë§ –ü—Å–∏—Ö–æ–ª–æ–≥: {client.psychologist if client.psychologist else "–õ—é–±–æ–π"}\n'
                                       f'üìÖ –î–∞—Ç–∞: {client.date_record}\n'
                                       f'üïì –í—Ä–µ–º—è: {client.time_record}')
            check_phone_number(call.message)
        else:
            bot.send_message(call.message.chat.id, '–í—Ä–µ–º—è –∫—Ç–æ-—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ!')
    else:
        go_to_menu(call)

@bot.callback_query_handler(func=lambda call: call.data == 'MENU')
def go_to_menu(call):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    check_phone_number(call.message)

bot.infinity_polling()